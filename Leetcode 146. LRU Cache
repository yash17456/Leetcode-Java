https://leetcode.com/problems/lru-cache/

class LRUCache 
{
    HashMap<Integer,Integer> map = new HashMap<Integer, Integer>();
    ArrayList<Integer> list =  new ArrayList<Integer>();
    int cap;
    public LRUCache(int capacity) 
    {
        cap = capacity;
    }
    
    public int get(int key) 
    {
        if(map.containsKey(key))
        {
            list.remove(new Integer(key));
            list.add(key);
            return map.get(key);
        }
        else
            return -1;
    }
    
    public void put(int key, int value) 
    {
        if(map.containsKey(key))
        {
            map.put(key,value);
            list.remove(new Integer(key));
            list.add(key);
        }
        else
        {
            if(map.size()<cap)
            {
                map.put(key,value);
                list.add(key);
            }
            else
            {
                //what happens if size is reached
                int mkey = list.remove(0);
                list.add(key);
                map.remove(mkey);
                map.put(key,value);
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
