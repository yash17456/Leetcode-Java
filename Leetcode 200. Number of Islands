
https://leetcode.com/problems/number-of-islands/


class Solution 
{
    HashSet<Pair<Integer, Integer>> set = new HashSet<Pair<Integer, Integer>>();           // Hashmap used so that we keep track of the visited positions in the graph and don't visit it again
    public int numIslands(char[][] grid) 
    {
        if(grid.length == '0')
          return 0;
          
        int total_islands = 0;
        for(int i = 0; i < grid.length; i++)
        {
          for(int j =0; j < grid[i].length; j++)
          {
            if(grid[i][j] == '1' && !set.contains(new Pair<Integer, Integer>(i, j)))
              {
                total_islands++;
                set.add(new Pair<Integer, Integer>(i, j));
                DFS(grid, i, j);
              }
          }
        }
        return total_islands;
    }
    // O(mn)
    
    public void DFS(char[][] grid, int x, int y)
    {
      int pos[][] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
      
      for(int i = 0; i < pos.length; i++)
      {
        int pos_x = x + pos[i][0];
        int pos_y = y + pos[i][1];
          
        if( pos_x >= 0  && pos_x < grid.length && pos_y >= 0  && pos_y < grid[pos_x].length && grid[pos_x][pos_y] == '1' && !set.contains(new Pair<Integer, Integer>(pos_x, pos_y)))
        {
            set.add(new Pair<Integer, Integer>(pos_x, pos_y));
            DFS(grid, pos_x, pos_y);
        }
          
      }
    }
}
