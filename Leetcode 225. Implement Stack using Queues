
https://leetcode.com/problems/implement-stack-using-queues/


class MyStack {

    /** Initialize your data structure here. */
    Queue<Integer> queue1 = new LinkedList<Integer>();
    Queue<Integer> queue2 = new LinkedList<Integer>();
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) 
    {
        queue1.add(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() 
    {
        while(queue1.size()>1)
            queue2.add(queue1.poll());
        int res = queue1.poll();
        while(queue2.size()>0)
            queue1.add(queue2.poll());
        return res;
    }
    
    /** Get the top element. */
    public int top() 
    {
        while(queue1.size()>1)
            queue2.add(queue1.poll());
        int res = queue1.peek();
        queue2.add(queue1.poll());
        while(queue2.size()>0)
            queue1.add(queue2.poll());
        return res;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() 
    {
        if(queue1.size()>0)
           return false;
        else
           return true;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
