
https://leetcode.com/problems/unique-paths-ii/

class Solution 
{
    int opt[][];                                                                   // 2D array in order to implement tabulation.
    
    public int uniquePathsWithObstacles(int[][] obstacleGrid) 
    {
        int rows = obstacleGrid.length;
        int columns = obstacleGrid[0].length;
        opt = new int[rows][columns];
        
        gridSetup(obstacleGrid, rows, columns);                                   // this function sets up the grid, checks for obstacles and fills the initial values.
        
        for(int i = 1; i< rows; i++)
        {
            for(int j = 1; j< columns; j++)
            {
                if(obstacleGrid[i][j] == 1)
                    opt[i][j] = -1;
                
                else
                {
                    if(opt[i-1][j]!=-1 && opt[i][j-1]!=-1)
                        opt[i][j] =  opt[i-1][j] + opt[i][j-1];
                    
                    else if(opt[i-1][j]!=-1 && opt[i][j-1]==-1)
                        opt[i][j] =  opt[i-1][j] ;
                    
                    else if(opt[i-1][j]==-1 && opt[i][j-1]!=-1)
                        opt[i][j] =  opt[i][j-1] ;
                    
                    else
                        opt[i][j] = -1;
                }
            }
            
        }
        
        if(opt[rows-1][columns-1] == -1)
            return 0;
        
        return opt[rows-1][columns-1];
    }
    
    public void gridSetup(int[][] obstacleGrid, int rows, int columns)
    {
        for(int i = 0; i< columns; i++)
        {
            if(obstacleGrid[0][i] == 0)
                opt[0][i] = 1;
            
            else
            {
                for(int j = i; j< columns; j++)
                    opt[0][j] = -1;
                
                break;
            }
        }
        
        for(int i = 0; i< rows; i++)
        {
            if(obstacleGrid[i][0] == 0)
                opt[i][0] = 1;
            
            else
            {
                for(int j = i; j< rows; j++)
                    opt[j][0] = -1;
                
                break;
            }
        }
        
    }
}
